W08 Assignment: Program 8.1
Using the example of the Circle class from section 9.2 of the textbook design a Rectangle class. Create a UML class diagram that shows your design. Your UML class diagram must be submitted as part of this assignment. The preferred format for you class diagram is a .PDF file. This week's Powerpoint slides describe how to create a UML class digram. Your Rectangle class should contain the following:

Two data fields named width and height, that specify the width and height of the rectangle. The default values for both width and height should be 1.
A no-arg constructor that creates a default rectangle object.
A parameterized constructor that creates a rectangle object with the specified height and width.
Getter and setter methods for height and width.
A method named getArea( ) that computes and returns the area of the rectangle.
 A method names getPerimeter( ) that computes and returns the perimeter of the rectangle.
Your file should have the proper file prologue (comments) and each method should have the proper method prologue (comments).
Then write a short Java program that implements your Rectangle class, and a main() method that does the following:

Tells the user what the program does.
Creates two Rectangle objects, the first with a height of 4 and a width of 40, the second with a height of 3.5 and a width of 5.
Call the methods in your Rectangle class to output the width, height, area, and perimeter of each rectangle, with 2 digits after the decimal point. 
Output a goodbye message.
The following example illustrates what your program should look like when it runs.W08 Assignment: Program 8.2
Wrote a short Java program that does the following:

Tells the user what the program does.
Using the Date class (described in section 9.6.1 of the textbook) Create a Date object and set it's elapsed time to 10000, 100000, 1000000, 10000000, 100000000, 1000000000, and 10000000000 and displays the data and time using the toString( ) method, respectively. 
Display a goodbye message.
The following example shows you what your program should look like when it runs: (Your values will match the timezone where the program is executed.)

